apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ch-chart-template.fullname" . }}
  labels: {{- include "standardlabels" . | nindent 4 }}
    {{- if .Values.global.commonLabels }}
    {{- include "commonlabels" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.global.commonAnnotations }}
  annotations: {{- include "commonlabels" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{- include "standardlabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "standardlabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
      {{- if .Values.global.image.username }}
        - name: {{ .Release.Name }}-image-pull-secret
      {{- else if .Values.global.image.imagePullSecrets }}
        {{- range .Values.global.image.imagePullSecrets }}
        - name: {{ .name }}
        {{- end }}
      {{- end }}
      volumes:
      {{- if .Values.global.pvcName }}
      - name: ch-pvc
        persistentVolumeClaim:
          claimName: {{ .Values.global.pvcName }}
      {{- end }}
      {{- if and (eq (.Values.global.webappProtocol | default "HTTP") "HTTP") (eq .Chart.Name "webapp") }}
      - name: webapp-config
        configMap:
          name: {{ .Release.Name }}-webapp
      {{- end }}
      initContainers:
        - name: {{ .Chart.Name }}-init
          image: registry.access.redhat.com/ubi8/ubi:8.3
          command: ["/bin/sh", "-c", "mkdir -p /opt/cloudhedge/shared/ && chmod -R 777 /opt/cloudhedge/shared/"]
          {{- if .Values.global.pvcName  }}
          volumes:
          - name: ch-pvc
            mountPath: /opt/cloudhedge/shared
          {{- end }}
          securityContext:
            runAsUser: 0
      containers:
        - name: {{ .Chart.Name }}
          image {{ .Values.image }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-app-service-urls
            - secretRef:
                name: {{ .Release.Name }}-secret
            {{- if .Values.envRefs }}
            {{- range .Values.envRefs }}
            {{- if eq .type "configMapRef" }}
            - configMapRef:
                name: {{ .ref }}
            {{- else if eq .type "secretRef" }}
            - secretRef:
                name: {{ .ref }}
            {{- end }}
            {{- end }}
            {{- end }}
          {{- if .Values.envs }}
          env:
            {{- range .Values.envs }}
            - name: {{ .name }}
              value: {{ .value }}
            {{- end }}
          {{- end }}
          ports:
          - name: {{ include "findPortScheme" ( dict "component" .Chart.Name "protocol" (.Values.global.webappProtocol | default "HTTP")) | lower }}
            containerPort: {{ include "findContainerPort" ( dict "component" .Chart.Name "protocol" (.Values.global.webappProtocol | default "HTTP")) }}
            protocol: TCP
          volumeMounts:
            {{- if and (eq (.Values.global.webappProtocol | default "HTTP") "HTTP") (eq .Chart.Name "webapp") }}
            - name: webapp-config
              mountPath: /etc/nginx/
            {{- end }}
            {{- if .Values.global.pvcName  }}
            - name: ch-pvc
              mountPath: /opt/cloudhedge/shared
            {{- end }}
          {{- if ne .Chart.Name "logging-agent" }}
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            httpGet:
              path: /
              port: {{ include "findContainerPort" ( dict "component" .Chart.Name "protocol" (.Values.global.webappProtocol | default "HTTP") ) }}
              scheme: {{ include "findPortScheme" ( dict "component" .Chart.Name "protocol" (.Values.global.webappProtocol | default "HTTP")) }}
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            httpGet:
              path: /
              port: {{ include "findContainerPort" ( dict "component" .Chart.Name "protocol" (.Values.global.webappProtocol | default "HTTP") ) }}
              scheme: {{ include "findPortScheme" ( dict "component" .Chart.Name "protocol" (.Values.global.webappProtocol | default "HTTP")) }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
